generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  userId       String   @unique
  fcmToken     String?
  lastActiveAt DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  wallet       Wallet?
  orders       Order[]
  watchHistory WatchHistory[]
  transactions Transaction[]

  @@index([lastActiveAt])
}

model Wallet {
  id        String   @id @default(cuid())
  userId    String   @unique
  balance   Int      @default(50) // in coins
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Transaction {
  id             String   @id @default(cuid())
  userId         String
  type           TransactionType
  amount         Int                                // in coins
  source         String                             // e.g. 'purchase', 'reward', 'admin', etc.
  transactionId  String   @unique                   // Google Play or Razorpay transaction ID
  status         TransactionStatus @default(PENDING)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user           User     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId])
  @@index([transactionId])
}

enum TransactionType {
  CREDIT
  DEBIT
}

enum TransactionStatus {
  SUCCESS
  PENDING
  FAILED
}

model TopupOptions {
  id            String   @id @default(cuid())
  coins         Int
  googleProductId String @unique
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model BoostPlan {
  id          String   @id @default(cuid())
  title       String
  description String?
  price       Int      // in coins
  views       Int      @default(0)
  duration    Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orders      Order[]
}

model Order {
  id         String   @id @default(cuid())
  userId     String
  planId     String
  url        String
  completedCount Int @default(0)
  status     OrderStatus @default(PENDING)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  watchHistory WatchHistory[] 

  user       User      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  boostPlan  BoostPlan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([planId])
}

enum PlanType {
  VIEW
  LIKE
}

enum OrderStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}

model WatchHistory {
  id        String   @id @default(cuid())
  userId    String
  orderId   String
  watchedAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@unique([userId, orderId]) // ensures a user can't watch the same order twice
  @@index([orderId])
  @@index([userId])
}
