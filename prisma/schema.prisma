generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(cuid())
  userId       String         @unique
  fcmToken     String?
  lastActiveAt DateTime       @default(now())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  orders       Order[]
  transactions Transaction[]
  wallet       Wallet?
  watchHistory WatchHistory[]

  @@index([lastActiveAt])
}

model Wallet {
  id        String   @id @default(cuid())
  userId    String   @unique
  balance   Int      @default(50)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Transaction {
  id            String            @id @default(cuid())
  userId        String
  type          TransactionType
  amount        Int
  source        String
  transactionId String            @unique
  status        TransactionStatus @default(PENDING)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  user          User              @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId])
  @@index([transactionId])
}

model TopupOptions {
  id              String   @id @default(cuid())
  coins           Int
  googleProductId String   @unique
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model BoostPlan {
  id          String   @id @default(cuid())
  title       String
  description String?
  price       Int
  salePrice   Int?
  views       Int      @default(0)
  duration    Int      @default(0)
  reward      Int      @default(5)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      Order[]
}

model Order {
  id             String         @id @default(cuid())
  userId         String
  planId         String
  url            String
  viewCount      Int            @default(0)
  completedViewCount      Int            @default(0)
  completedCount Int            @default(0)
  status         OrderStatus    @default(PENDING)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  boostPlan      BoostPlan      @relation(fields: [planId], references: [id], onDelete: Cascade)
  user           User           @relation(fields: [userId], references: [userId], onDelete: Cascade)
  watchHistory   WatchHistory[]

  @@index([userId])
  @@index([planId])
}

model WatchHistory {
  id        String   @id @default(cuid())
  userId    String
  orderId   String
  watchedAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([userId, orderId])
  @@index([orderId])
  @@index([userId])
}

enum TransactionType {
  CREDIT
  DEBIT
}

enum TransactionStatus {
  SUCCESS
  PENDING
  FAILED
}

enum OrderStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}
